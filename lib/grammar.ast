TARGET = ocaml
PRELUDE = {
  open! Tokens
  open! Ast
  open! Span

  let bop b l r = no_loc @@ EBop (b, l, r)
  let uop b l = no_loc @@ EUop (b, l)
}
ENTRY = program

token_Ident = string
token_String = string
token_StringFragment = string
token_Int = {int64}

program: { item list }
  | ITEM program { v0 :: v1 }
  | { [] }

ITEM: { item }
  | FUNC { Func v0 }
  | RECIPE { match v0 with a, b -> Recipe (a, b) }
  | BAKE { match v0 with a, b, c -> Bake (a, b, c) }

FUNC: { func node }
  | Toaster Ident HAPPINESS ARG_LIST RETURN_TYPE BLOCK
      { no_loc (v1, v2, v3, v4, v5) }

RECIPE: { id * recipe_item list }
  | Recipe Ident OpenBrace RECIPE_BODY CloseBrace { v1, v3 }

RECIPE_ITEM: { recipe_item }
  | Toast Ident Semicolon { ToastDef v1 }
  | Toaster Ident HAPPINESS ARG_LIST RETURN_TYPE Semicolon
      { ToasterStub (no_loc (v1, v2, v3, v4)) }
  | FUNC { Toaster v0 }

RECIPE_BODY: { recipe_item list }
  | { [] }
  | RECIPE_ITEM RECIPE_BODY { v0 :: v1 }

BAKE: { id * id * bake_item list }
  | Bake Ident With Ident OpenBrace BAKE_BODY CloseBrace { v1, v3, v5 }

BAKE_ITEM: { bake_item }
  | TYPEDEF { BToast v0 }
  | FUNC { BToaster v0 }

BAKE_BODY: { bake_item list }
  | { [] }
  | BAKE_ITEM BAKE_BODY { v0 :: v1 }

TYPEDEF: { typedef node }
  | Toast Ident Equals TYPE Semicolon { no_loc @@ (v1, v3) }

HAPPINESS: { bool }
  | Happy { true }
  | Sad { false }

ARG: { arg }
  | Ident Colon TYPE { v0, v2 }
  | Me { "me", TVar "Me" }

ARG_LIST: {arg list}
  | ARG_LIST_ { List.rev v0 }
  | ARG_LIST_ Comma { List.rev v0 }
  | Comma { [] }
  | { [] }

ARG_LIST_: {arg list}
  | ARG_LIST_ Comma ARG { v2 :: v0 }
  | ARG { [v0] }

TYPE: { ty }
  | OpenParen CloseParen { TTuple [] }
  | Ident { TVar v0 }

RETURN_TYPE: { ty }
  | Arrow TYPE { v1 }
  | { TTuple [] }

BLOCK: { block }
  | OpenBrace STATEMENTS CloseBrace { v1 }

STATEMENTS: { stmt node list }
  | STATEMENT STATEMENTS { v0 :: v1 }
  | { [] }

STATEMENT: { stmt node }
  | Return Semicolon { no_loc @@ SReturn (no_loc @@ ETuple []) }
  | Return EXPR Semicolon { no_loc @@ SReturn v1 }
  | Give Semicolon { no_loc @@ SGive (no_loc @@ ETuple []) }
  | Give EXPR Semicolon { no_loc @@ SGive v1 }
  | IF_CONSTRUCT { match v0 with (cond, yes, no) -> no_loc @@ SIf (cond, yes, no) }
  | Let PATTERN Assign EXPR Semicolon { no_loc @@ SLet (v1, v3) }

EXPR: { expr node }
  | EXPR LogOr EXPR_LXOR { bop BopLogOr v0 v2 }
  | EXPR_LXOR { v0 }

EXPR_LXOR: { expr node }
  | EXPR_LXOR LogXor EXPR_LAND { bop BopLogXor v0 v2 }
  | EXPR_LAND { v0 }

EXPR_LAND: { expr node }
  | EXPR_LAND LogAnd EXPR_EQ { bop BopLogAnd v0 v2 }
  | EXPR_EQ { v0 }

EXPR_EQ: { expr node }
  | EXPR_EQ Equals EXPR_ORD { bop BopEqual v0 v2 }
  | EXPR_EQ NotEquals EXPR_ORD { bop BopNotEqual v0 v2 }
  | EXPR_ORD { v0 }

EXPR_ORD: { expr node }
  | EXPR_ORD Less EXPR_BOR { bop BopLess v0 v2 }
  | EXPR_ORD LessEqual EXPR_BOR { bop BopLessEqual v0 v2 }
  | EXPR_ORD GreaterEqual EXPR_BOR { bop BopGreaterEqual v0 v2 }
  | EXPR_ORD Greater EXPR_BOR { bop BopGreater v0 v2 }
  | EXPR_BOR { v0 }

EXPR_BOR: { expr node }
  | EXPR_BOR BitOr EXPR_BXOR { bop BopBitOr v0 v2 }
  | EXPR_BXOR { v0 }

EXPR_BXOR: { expr node }
  | EXPR_BXOR BitXor EXPR_BAND { bop BopBitXor v0 v2 }
  | EXPR_BAND { v0 }

EXPR_BAND: { expr node }
  | EXPR_BAND BitAnd EXPR_SHIFT { bop BopBitAnd v0 v2 }
  | EXPR_SHIFT { v0 }

EXPR_SHIFT: { expr node }
  | EXPR_SHIFT ShiftRight EXPR_ADD { bop BopShr v0 v2 }
  | EXPR_SHIFT ShiftLeft EXPR_ADD { bop BopShl v0 v2 }
  | EXPR_ADD { v0 }

EXPR_ADD: { expr node }
  | EXPR_ADD Plus EXPR_MUL { bop BopAdd v0 v2 }
  | EXPR_ADD Minus EXPR_MUL { bop BopSub v0 v2 }
  | EXPR_MUL { v0 }

EXPR_MUL: { expr node }
  | EXPR_MUL Times EXPR_UOP { bop BopMul v0 v2 }
  | EXPR_MUL Divide EXPR_UOP { bop BopDiv v0 v2 }
  | EXPR_UOP { v0 }

EXPR_UOP: { expr node}
  | Minus EXPR_UOP { uop UopNegative v1 }
  | Plus EXPR_UOP { uop UopPos v1 }
  | BinNot EXPR_UOP { uop UopFlip v1 }
  | LogNot EXPR_UOP { uop UopNeg v1 }
  | EXPR_EXP { v0 }

EXPR_EXP: { expr node }
  | EXPR_EXP Exponent EXPR_ATOM { bop BopExp v0 v2 }
  | EXPR_ATOM { v0 }

EXPR_ATOM: { expr node }
  | OpenParen EXPR CloseParen { v1 }
  | OpenParen CloseParen { no_loc @@ ETuple [] }
  | Int { no_loc @@ EInt v0 }
  | Ident { no_loc @@ EVar v0 }
  | Me { no_loc @@ EVar "me" }
  | EXPR_ATOM Dot Ident { no_loc @@ EAccess (v0, v2) }
  | IF_CONSTRUCT { match v0 with (cond, yes, no) -> no_loc @@ EIf (cond, yes, no) }
  | String { no_loc @@ EString v0 }
  | BeginString FORMAT EndString { no_loc @@ EFormatString v1 }
  | EXPR_ATOM OpenParen E_LIST CloseParen { no_loc @@ ECall (v0, true, v2) }

E_LIST: { expr node list }
  | E_LIST_ { List.rev v0 }
  | E_LIST_ Comma { List.rev v0 }
  | Comma { [] }
  | { [] }

E_LIST_: { expr node list }
  | E_LIST_ Comma EXPR { v2 :: v0 }
  | EXPR { [v0] }



FORMAT: { segment list }
  | StringFragment { [Fragment v0] }
  | StringFragment EXPR FORMAT { (Fragment v0) :: (SegExpr v1) :: v2  }

IF_CONSTRUCT: { expr node * block * block option }
  | If EXPR BLOCK { (v1, v2, None) }
  | If EXPR BLOCK Else BLOCK { (v1, v2, Some v4) }
# TODO else if chains etc

PATTERN: { pattern }
  | Ident { PId v0 }

# TODO: implement grammar
